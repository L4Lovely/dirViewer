import curses
import keyboard as kb
import subprocess
import os
from sys import exit

screen = curses.initscr() # start
screen.keypad(1)
curses.noecho()           # no line-buffer
curses.curs_set(0)

termWidth  = os.get_terminal_size().columns - 1
termHeight = os.get_terminal_size().lines
currDir = os.listdir('/')
PathHistory = ['/']
dirSize = 0

def _lineCHA(glyph):
    chaDict = {
    'dlht' : '\u2500',
    'dlvt' : '\u2502',
    'dltl' : '\u256d',
    'dltr' : '\u256e',
    'dlbl' : '\u2570',
    'dlbr' : '\u256f',
    'dlTt' : '\u252c',
    'dlTb' : '\u2534',
    'dlTl' : '\u251c',
    'dlTr' : '\u2524'
    }
    return chaDict[glyph]

def _clearArea(xoff,yoff,xlen,ylen):
    for y in range(0,ylen):
        for x in range(0,xlen):
            screen.addstr(y + yoff, x + xoff, ' ')

def _drawConsoleBorder():
    global termWidth, termHeight;
    xlen = termWidth
    ylen = termHeight
    xoff = 0
    yoff = 0
    for y in range(0,ylen):
        for x in range(0,xlen):
            if(x <= 0 or x == xlen - 1):
                screen.addstr(y + yoff, x + xoff, _lineCHA('dlvt'))
            if(y <= 0 or y == ylen - 1):
                screen.addstr(y+ yoff, x + xoff, _lineCHA('dlht'))
            if(x == 0 and y == 0): screen.addstr(y+ yoff, x+ xoff, _lineCHA('dltl'))
            if(x == xlen - 1 + xoff and y == 0): screen.addstr( y + yoff, x + xoff, _lineCHA('dltr'))
            if(x == 0 and y == ylen - 1 + yoff): screen.addstr( y + yoff, x + xoff, _lineCHA('dlbl'))
            if(x == xlen - 1 + xoff and y == ylen - 1 + yoff): screen.addstr( y + yoff, x + xoff, _lineCHA('dlbr'))

def _drawH_rod(direction, length, offx, offy):
    if(direction == 'vt'):
        for y in range(1,length - 1):
            screen.addstr(y + offy, offx, _lineCHA('dlvt'))
        screen.addstr(offy, offx, _lineCHA('dlTt'))
        screen.addstr(y + offy, offx, _lineCHA('dlTb'))
    if(direction == 'ht'):
        for x in range(1,length - 1):
            screen.addstr(offy, x + offx, _lineCHA('dlht'))
        screen.addstr(offy, offx, _lineCHA('dlTl'))
        screen.addstr(offy, x + offx, _lineCHA('dlTr'))

listLength = []
def _drawNode(dirname_):
    global listLength, currDir, dirSize
    nPos_x = 23; nPos_y = 3
    dirList = []
    fileList = []
    for item in os.listdir(dirname_):
        if os.path.isdir(os.path.join(dirname_,item)):
            dirList.append(item)
        elif os.path.isfile(os.path.join(dirname_,item)):
            fileList.append(item)

    dirList.sort()
    fileList.sort()
    currDir.clear()
    currDir += dirList
    currDir += fileList
    dirSize = len(currDir)
    

    for y in range(0,len(dirList)):
        if(y + nPos_y < termHeight - 1):
            screen.addstr(y + nPos_y, nPos_x, '/' + str(dirList[y]))
    for yy in range(0,len(fileList)):
        if(yy + nPos_y + len(dirList) < termHeight - 1):
            screen.addstr(yy + nPos_y + len(dirList), nPos_x, str(fileList[yy]))

def _setPath(injectDir):
    global PathHistory
    PathHistory.append(str(injectDir))
    PathHistory.append('/')

def _getPath():
    global PathHistory
    newPath = ''
    for i in range(0,len(PathHistory)):
        newPath += str(PathHistory[i])
    return newPath

cPos_origin = [22,3]
cPosPre = [22,5]
cPos = [22,3]
cPos_relative = 0
def _setCursor():
    global cPosPre, cPos
    screen.addstr(cPos[1],cPos[0],'}')
    if cPosPre != cPos: 
        screen.addstr(cPosPre[1],cPosPre[0],' ')

def _cursorRelative(direction):
    global cPosPre, cPos, cPos_relative, currDir, cPos_origin
    if direction == 'up':
        cPos_relative -= 1
        if (cPos_relative < 0):
            cPos_relative = len(currDir) - 1
            cPos[1] = len(currDir) + 2
    elif direction == 'down':
        cPos_relative += 1
        if (cPos_relative > len(currDir) - 1):
            cPos_relative = 0
            cPos[1] = cPos_origin[1]
    elif direction == 'stop':
        cPos_relative = 0

def _debugLine():
    testPath = _getPath()
    screen.addstr(termHeight-10,termWidth-40,'                            ')
    screen.addstr(termHeight-11,termWidth-40,'                            ')
    screen.addstr(termHeight-10,termWidth-40,str(PathHistory))
    screen.addstr(termHeight-11,termWidth-40,str(testPath))

####################################
_drawConsoleBorder()
screen.addstr(0,3,'[dirViewer]')
_drawH_rod('vt',termHeight+1,20,0)
_drawH_rod('vt',termHeight+1,40,0)
_drawH_rod('ht',22,20,2)
_drawNode('/')

_setCursor()

screen.addstr(40,50,'')
screen.refresh()
####################################

keyLock = False
while True:
    _debugLine() ###remove later
    if kb.is_pressed('i') and keyLock is not True:
        cPosPre[0] = cPos[0]; cPosPre[1] = cPos[1]
        cPos[1] -= 1
        _cursorRelative('up')
        _setCursor()
        screen.refresh()
        keyLock = True
    if kb.is_pressed('k') and keyLock is not True:
        cPosPre[0] = cPos[0]; cPosPre[1] = cPos[1]
        cPos[1] += 1
        _cursorRelative('down')
        _setCursor()
        screen.refresh()
        keyLock = True
    if kb.is_pressed('esc'): break
    if kb.is_pressed('j') and keyLock is not True:
        _clearArea(cPos_origin[0] + 1,cPos_origin[1],16,termHeight - cPos_origin[1] - 1)
        PathHistory.pop(); PathHistory.pop()
        _drawNode(_getPath())
        cPosPre[0] = cPos[0]; cPosPre[1] = cPos[1]
        cPos[1] = cPos_origin[1]
        cPos_relative = 0
        _setCursor()
        screen.refresh()
        keyLock = True
    if kb.is_pressed('l') and keyLock is not True:
        _setPath(str(currDir[cPos_relative]))
        _clearArea(cPos_origin[0] + 1,cPos_origin[1],16,termHeight - cPos_origin[1] - 1)
        _drawNode(_getPath())
        cPosPre[0] = cPos[0]; cPosPre[1] = cPos[1]
        cPos[1] = cPos_origin[1]
        cPos_relative = 0
        _setCursor()
        screen.refresh()
        keyLock = True
    if not kb.is_pressed('k') and not kb.is_pressed('i') and not kb.is_pressed('l') and not kb.is_pressed('j'):
        keyLock = False

curses.curs_set(1)
curses.nocbreak()
screen.keypad(0)
curses.echo()
curses.endwin
